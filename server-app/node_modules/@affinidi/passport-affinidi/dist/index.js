"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.affinidiProvider = exports.affinidiPassport = void 0;
const tslib_1 = require("tslib");
const express_session_1 = tslib_1.__importDefault(require("express-session"));
const openid_client_1 = require("openid-client");
const passport_1 = tslib_1.__importDefault(require("passport"));
const profile_1 = require("./profile");
const strategy_1 = tslib_1.__importDefault(require("./strategy"));
exports.affinidiPassport = passport_1.default;
const affinidiProvider = async (app, options) => {
    //setting default
    options = {
        verifyCallback: (req, tokenSet, userinfo, done) => {
            return done(null, tokenSet.claims());
        },
        profileParser: profile_1.profileParser,
        noSPARoutes: false,
        passport: {
            initializeSession: false,
        },
        ...options,
    };
    const { client, strategy, sessionKey } = await (0, strategy_1.default)(options);
    passport_1.default.use(options.id, strategy);
    app.use((0, express_session_1.default)(options.expressSesssion || {
        secret: options.id,
        resave: false,
        saveUninitialized: true,
        cookie: {
            secure: process.env.NODE_ENV === 'production',
            maxAge: 1000 * 60 * 60 * 24 * 1, // 1 day
        },
        unset: 'destroy',
    }));
    if (options.passport?.initializeSession === true) {
        app.use(passport_1.default.initialize());
        app.use(passport_1.default.session());
        //handles serialization and deserialization of authenticated user
        passport_1.default.serializeUser(options.passport?.serializeUser ||
            function (user, done) {
                done(null, user);
            });
        passport_1.default.deserializeUser(options.passport?.deserializeUser ||
            function (user, done) {
                done(null, user);
            });
    }
    const initHandler = (req, res, next) => {
        const code_verifier = openid_client_1.generators.codeVerifier();
        const params = {
            code_challenge: openid_client_1.generators.codeChallenge(code_verifier),
            code_challenge_method: 'S256',
            response_type: 'code',
            scope: 'openid',
            state: openid_client_1.generators.state(),
        };
        req.session[sessionKey] = {
            state: params.state,
            response_type: params.response_type,
            code_verifier,
        };
        const authorizationUrl = client.authorizationUrl(params);
        res.send({ authorizationUrl });
    };
    const completeHandler = (req, res, next) => {
        passport_1.default.authenticate(options.id, {}, function (err, user, info) {
            if (err) {
                if (options.onError && typeof options.onError === 'function') {
                    options.onError(err, info);
                }
                res.status(400).send({
                    error: err.message,
                    error_description: err.error_description,
                });
            }
            else {
                const profile = (options.profileParser && options.profileParser(user)) || (0, profile_1.profileParser)(user);
                if (options.onSuccess && typeof options.onSuccess === 'function') {
                    options.onSuccess(user, profile, info);
                }
                res.send({ user: profile });
            }
        })(req, res, next);
    };
    if (options.noSPARoutes !== true) {
        app.get(options.routes?.init || '/api/affinidi-auth/init', options.routes?.initHandler || initHandler);
        app.post(options.routes?.complete || '/api/affinidi-auth/complete', options.routes?.completeHandler || completeHandler);
    }
};
exports.affinidiProvider = affinidiProvider;
//# sourceMappingURL=index.js.map