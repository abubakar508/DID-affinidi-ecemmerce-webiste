"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useExtension_1 = require("./useExtension");
const types_1 = require("../types");
function useCompleteRequest({ presentationDefinition, callbackUrl, doVerification = true, useVerifyVpMutation, }) {
    const { client } = (0, useExtension_1.useExtension)();
    const [error, setError] = (0, react_1.useState)();
    const [errorDescription, setErrorDescription] = (0, react_1.useState)();
    const [vpToken, setVpToken] = (0, react_1.useState)();
    const [presentationSubmission, setPresentationSubmission] = (0, react_1.useState)();
    const { mutate, ...mutation } = (useVerifyVpMutation && useVerifyVpMutation()) || {};
    (0, react_1.useEffect)(() => {
        if (window.location.href.indexOf(callbackUrl) == -1)
            return;
        try {
            const response = client.completeAuth(window.location.href);
            if ('error' in response) {
                setError(types_1.errorMessageMap[response.error] || 'Unexpected error');
                setErrorDescription((response.errorDescription && types_1.errorDescriptionMessageMap[response.errorDescription]) || undefined);
                return;
            }
            else {
                setVpToken(response.vpToken);
                setPresentationSubmission(response.presentationSubmission);
            }
        }
        catch (err) {
            setError(err.messsage || 'Unexpected error');
        }
    }, [client, setVpToken, setPresentationSubmission]);
    (0, react_1.useEffect)(() => {
        if (doVerification && mutation && mutation.error) {
            setVpToken(undefined);
            setPresentationSubmission(undefined);
            setError('Could not verify your data');
            setErrorDescription(mutation.error.message);
        }
    }, [mutation.error]);
    (0, react_1.useEffect)(() => {
        if (vpToken && doVerification && mutate) {
            mutate({
                verifiablePresentation: vpToken,
                presentationSubmission,
                presentationDefinition,
            });
        }
    }, [vpToken, presentationSubmission, mutate]);
    return {
        vpToken,
        presentationSubmission,
        error,
        errorDescription,
        isLoading: doVerification ? mutation.isIdle || mutation.isLoading : false,
        isCompliant: doVerification ? Boolean(mutation.data?.isCompliant) : true,
    };
}
exports.default = useCompleteRequest;
//# sourceMappingURL=useCompleteRequest.js.map