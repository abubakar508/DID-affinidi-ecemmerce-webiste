"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const types_1 = require("../types");
const storageKey = 'affinidi-login';
const getStorgageData = () => {
    const data = window.localStorage.getItem(storageKey);
    return data ? JSON.parse(data) : undefined;
};
const setStorgageData = (data) => {
    window.localStorage.setItem(storageKey, JSON.stringify(data));
    return data;
};
const clearStorgageData = () => {
    window.localStorage.removeItem(storageKey);
};
const useAffinidiProfile = ({ redirectTo = '/', authCompleteUrl = '/api/affinidi-auth/complete' } = {}) => {
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [code, setCode] = (0, react_1.useState)(undefined);
    const [state, setState] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        const urlObject = new URL(window.location.href);
        const params = new URLSearchParams(urlObject.search);
        const pCode = params.get('code');
        const perror = params.get('error');
        if (pCode) {
            setCode(pCode);
            setState(params.get('state'));
        }
        else if (perror) {
            const errorDescription = params.get('error_description') || '';
            setStorgageData({
                error: `${types_1.errorMessageMap[perror] || 'Unexpected error'} - ${(errorDescription && types_1.errorDescriptionMessageMap[errorDescription]) || undefined}`,
            });
            window.location.href = redirectTo;
        }
    }, []);
    (0, react_1.useEffect)(() => {
        if (!code) {
            return;
        }
        const getProfile = async (params) => {
            setIsLoading(true);
            const res = await fetch(authCompleteUrl, {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(params),
            });
            const response = await res.json();
            if (response.error) {
                setStorgageData({
                    error: `${response.error}-${response.error_description}`,
                });
            }
            else {
                setStorgageData({ profile: response.user });
            }
            setIsLoading(false);
            window.location.href = redirectTo;
        };
        const params = { code, state };
        getProfile(params);
    }, [code, state]);
    async function handleLogout() {
        clearStorgageData();
    }
    return {
        handleLogout,
        isLoading,
        ...getStorgageData(),
    };
};
exports.default = useAffinidiProfile;
//# sourceMappingURL=useAffinidiProfile.js.map