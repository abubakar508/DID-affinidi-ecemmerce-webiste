"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useCompleteRequest_1 = __importDefault(require("./useCompleteRequest"));
const useInitiateRequest_1 = __importDefault(require("./useInitiateRequest"));
const presentation_definitions_1 = require("../utils/presentation-definitions");
function useInitiateProfileRequest({ callbackUrl, doVerification, useVerifyVpMutation, }) {
    const [data, setData] = (0, react_1.useState)();
    const vaultRequest = {
        presentationDefinition: presentation_definitions_1.presentationDefinitions.emailAndProfileVC,
        callbackUrl,
        doVerification,
        useVerifyVpMutation,
    };
    const { isInitializing, isExtensionInstalled, handleInitiate } = (0, useInitiateRequest_1.default)(vaultRequest);
    const { vpToken, error, errorDescription, isLoading, isCompliant } = (0, useCompleteRequest_1.default)(vaultRequest);
    (0, react_1.useEffect)(() => {
        if (vpToken && !isLoading && isCompliant) {
            const emailVC = vpToken.verifiableCredential.find((vc) => vc.type.indexOf('Email') > -1);
            const profileVC = vpToken.verifiableCredential.find((vc) => vc.type.indexOf('UserProfile') > -1);
            if (emailVC) {
                const credentialSubject = Array.isArray(emailVC.credentialSubject)
                    ? emailVC.credentialSubject[0]
                    : emailVC.credentialSubject;
                setData((state) => ({ ...state, ...credentialSubject }));
            }
            if (profileVC) {
                const credentialSubject = Array.isArray(profileVC.credentialSubject)
                    ? profileVC.credentialSubject[0]
                    : profileVC.credentialSubject;
                setData((state) => ({
                    ...state,
                    ...credentialSubject,
                }));
            }
        }
    }, [vpToken, isLoading, isCompliant]);
    return {
        isInitializing,
        isExtensionInstalled,
        handleInitiate,
        isLoading: vpToken && isLoading,
        error,
        errorDescription,
        profileData: data,
    };
}
exports.default = useInitiateProfileRequest;
//# sourceMappingURL=useInitiateProfileRequest.js.map