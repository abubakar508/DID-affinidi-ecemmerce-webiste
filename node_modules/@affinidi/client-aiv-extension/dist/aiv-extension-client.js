"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AivExtensionClient = exports.CHROME_EXTENSION_ID = void 0;
exports.CHROME_EXTENSION_ID = 'fejpjjkbaklcdcibmkbmpanjbiihclon';
const INSTALLATION_CHECK_TIMEOUT_MS = 1000;
class AivExtensionClient {
    constructor(input) {
        var _a;
        this.chromeExtensionId = (_a = input === null || input === void 0 ? void 0 : input.chromeExtensionId) !== null && _a !== void 0 ? _a : exports.CHROME_EXTENSION_ID;
    }
    isInstalled() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                let image;
                let timeoutId;
                const respond = (result) => {
                    if (timeoutId)
                        clearTimeout(timeoutId);
                    if (image)
                        image.src = '';
                    resolve(result);
                };
                timeoutId = window.setTimeout(() => respond(false), INSTALLATION_CHECK_TIMEOUT_MS);
                image = window.document.createElement('img');
                image.onload = () => respond(true);
                image.onerror = () => respond(false);
                image.src = `chrome-extension://${this.chromeExtensionId}/stub.png`;
            });
        });
    }
    getOidc4vpAuthorizationUrl() {
        return `chrome-extension://${this.chromeExtensionId}/login.html`;
    }
    getChromeWebStoreUrl() {
        return `https://chrome.google.com/webstore/detail/${this.chromeExtensionId}`;
    }
    initiateAuth({ responseDestination, presentationDefinition, state, nonce, }) {
        const url = new URL(this.getOidc4vpAuthorizationUrl());
        if (responseDestination.responseMode === 'direct_post') {
            url.searchParams.set('response_mode', 'direct_post');
            url.searchParams.set('response_uri', responseDestination.responseUri);
        }
        else {
            url.searchParams.set('response_mode', 'query');
            url.searchParams.set('redirect_uri', responseDestination.redirectUri);
        }
        url.searchParams.set('response_type', 'vp_token');
        url.searchParams.set('scope', 'openid');
        url.searchParams.set('claims', JSON.stringify({
            vp_token: {
                presentation_definition: presentationDefinition,
            },
        }));
        url.searchParams.set('state', state);
        url.searchParams.set('nonce', nonce);
        window.location.href = url.toString();
    }
    completeAuth(url) {
        const urlObject = new URL(url);
        const params = new URLSearchParams(urlObject.search);
        const state = params.get('state');
        if (!state) {
            throw new Error('State is not present in the response');
        }
        const error = params.get('error');
        const errorDescription = params.get('error_description') || undefined;
        if (error) {
            return {
                state,
                error,
                errorDescription,
            };
        }
        const serializedVpToken = params.get('vp_token');
        const idToken = params.get('id_token') || undefined;
        const serializedPresentationSubmission = params.get('presentation_submission');
        if (!serializedVpToken || !serializedPresentationSubmission) {
            throw new Error('Some query parameters are missing in the response');
        }
        return {
            state,
            idToken,
            vpToken: JSON.parse(serializedVpToken),
            presentationSubmission: JSON.parse(serializedPresentationSubmission),
        };
    }
    getVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                if (!(chrome === null || chrome === void 0 ? void 0 : chrome.runtime))
                    resolve(undefined);
                const message = { type: 'version' };
                chrome.runtime.sendMessage(this.chromeExtensionId, message, (response) => {
                    if (chrome.runtime.lastError) {
                        resolve(undefined);
                    }
                    resolve(response === null || response === void 0 ? void 0 : response.version);
                });
            });
        });
    }
}
exports.AivExtensionClient = AivExtensionClient;
//# sourceMappingURL=aiv-extension-client.js.map